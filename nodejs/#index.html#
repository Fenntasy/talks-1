<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="utf-8">
    <title>Formation NodeJS</title>
    <script src="https://use.typekit.net/ddh4txs.js"></script>
    <script>try{Typekit.load({ async: true });}catch(e){}</script>
    <link rel="stylesheet" href="../common/hl/styles/xcode.css">
    <link rel="stylesheet" href="../common/style.css"/>
    <link rel="stylesheet" href="style.css"/>
    <script src="../common/hl/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
  </head>
  <body>

    <header class="quasar-removable">
      <div>
	<img class="logo-dc" src="../common/images/derniercri.png" alt="logo">
      </div>
      <h1>Formation NodeJS</h1>
    </header>
    
    <main id="quasar-slides">
      
      <section class="quasar-slide front-page">
	<div>
	  <img class="blueprint" alt="" src="../common/images/blueprint.svg"/>
	  <h1 class="main-title">Formation <span>NodeJS</span></h1>
	  Xavier Van de Woestyne - Novembre 2016 <br />
	  <img class="logo-dc" src="../common/images/derniercri-color.png" alt="logo">
	</div>
      </section>
      
      <section data-label="À propos de moi ! " class="quasar-slide">
	<div class="centered">
	  <h1 class="section-title">Bonjour !</h1>
	  <ul>
	    <li>Développeur à Dernier Cri</li>
	    <li>Programmation depuis <span class="important">1999</span></li>
	    <li>Travail de recherche (un peu particulier)</li>
	    <li>
	      <span class="important">@xvw</span>
	      sur Github et Medium,
	      <span class="important">@vdwxv</span> sur Twitter</li>
	    <li>Outils principaux: OCaml, Erlang, Elixir, F#, Ruby, JavaScript, Haskell.</li>
	  </ul>
	</div>
      </section>

      <section data-label="Dernier Cri ?" class="quasar-slide">
	<div class="centered">
	  <h1 class="section-title">Dernier Cri</h1>
	  <p>Une agence d'innovation <span class="important">numérique</span></p>
	  <ul>
	    <li>Web (développement/UI/UX)</li>
	    <li>Conception de produits et logiciels</li>
	    <li>Analyse et Machine-Learning</li>
	    <li>Consultance</li>
	    <li>Open-Source</li>
	    <li>Formations</li>
	    <li><span class="important">Ouvert à la communauté</span></li>
	  </ul>
	</div>
      </section>

      <section data-label="Présentation"  class="quasar-slide">
 	<div>
	  <h1 class="section-title">Rapide tour de présentation</h1>
	  <ul>
	    <li>Prénom et Nom</li>
	    <li>Eventuellement âge, hobbies</li>
	    <li>Expérience en développement</li>
	  </ul>
	  <blockquote class="normal">
	    Je peux tutoyer ou vouvoyer à la convenance !
	  </blockquote>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Objectifs de la formation</h1>
	  <ul>
	    <li>Comprendre le langage JavaScript</li>
	    <li>S'initier au développement d'application server-side avec JavaScript</li>
	    <li>Comprendre les motifs récurrents du web moderne</li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide plain" data-label="Programme de la formation">
	<div>
	  <h1 class="section-title centered">Programme</h1>
	  <div class="multi-columns small-text">
	    <div>
	      <strong class="important">Jour 1: Introduction à JavaScript</strong>
	      <ul>
		<li>Présentation et historique</li>
		<li>Tester en ligne de commande</li>
		<li>Eléments de syntaxe</li>
		<li>Programmation fonctionnelle</li>
		<li>Programmation orientée objets</li>
		<li>Gestion des erreurs</li>
		<li><strong>Exercice : intrerprêter Brainfuck</strong></li>
		
	      </ul>
	      <strong class="important">Jour 2 : NodeJS et son éco-système</strong>
	      <ul>
		<li>Présentation</li>
		<li>Prise en main</li>
		<li>Un premier programme</li>
		<li>Eco-système (NPM, modules) </li>
		<li>Packager une application</li>
		<li>Outils de déboguage</li>
	      </ul>
	    </div>
	    <div>
	      <strong class="important">Jour 2 : Fonctionnement d'un serveur web</strong>
	      <ul>
		<li>Principe général</li>
		<li>Serveurs génériques</li>
		<li>Application exposant un serveur</li>
	      </ul>
	      <strong class="important">Jour 2 : Programmation <i>server-side</i></strong>
	      <ul>
		<li>Un premier serveur simple</li>
		<li>Programmation événementielle</li>
		<li>Les Promesses</li>
		<li>Les <i>Streams</i></li>
		<li>Routage</li>
		<li>Descripteur de fichiers : lecture / écriture</li>
		<li><strong>Exercice : un serveur de fichiers statiques</strong></li>
	      </ul>
	    </div>
	    <div>
	      <strong class="important">Jour 3 : Implémentations concrètes</strong>
	      <ul>
		<li>Requêtes distantes (+Json)</li>
		<li>Persistance de données</li>
		<li>Express : simplification des routes</li>
		<li><strong>Exercice : une todo-liste</strong></li>
		<li>WebSockets via SocketIO</li>
		<li><strong>Exercice : utilisation des WebSockets</strong></li>
	      </ul>
	      <strong class="important">Jour 3 : Programmation parallèle avancée</strong>
	      <ul>
		<li>Notion de processus</li>
		<li><i>Clusters</i> et <i>workers</i></li>
		<li>Stratégies d'ordonnancement</li>
		<li>Programmation concurrente et acteurs</li>
		<li>Implémentation manuelle de MapReduce</li>
	      </ul>
	    </div>
	  </div>
	</div>
      </section>

      <section data-label"=Introduction" class="quasar-slide">
	<div class="section-cover">
	  <h1>JavaScript historiquement</h1>
	  <h2>Comment il est devenu ce qu'il est...</h2>
	</div>
      </section>

      <section data-label="JavaScript historiquement" class="quasar-slide">
	<div>
	  <h1 class="section-title">Historiquement</h1>
	  <ul>
	    <li>Brendan Eich, 1995</li>
	    <li>
	      <span class="important">Netscape</span> VS
	      <span class="important">Internet Explorer</span>
	    </li>
	    <li>Destiné à ajouter des effets aux pages</li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">De LiveScript à JavaScript</h1>
	  <ul>
	    <li>LiveScript : langage serveur pour Netscape</li>
	    <li>JavaScript : version cliente de LiveScript pour le navigateur</li>
	    <li>
	      Inspiré par <span class="important">Self</span> et
	      <span class="important">Lisp</span>
	    </li>
	    <li>JScript : version de Internet Explorer (Course à la <i>feature</i>)</li>
	    <li>Devenu un standard dans les navigateurs</li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">
	    Définition formelle de JavaScript
	  </h1>
	  <blockquote class="normal">
	    Le JavaScript est un langage de programmation de scripts orienté objet.
	  </blockquote>
	  <ul>
	    <li>
	      <span class="important">Langage compilé :</span>
	      modification d'un code source dans un autre langage
	    </li>
	    <li>
	      <span class="important">Langage interprêté :</span>
	      Lecture séquentielle du code "étape par étape". <br />(Peut être, pour des
	      gains de performance, compilé "à la volée").
	    </li>
	  </ul>
	  Dans le monde JavaScript, l'interprêteur est dans le navigateur.
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">ECMAScript</h1>
	  <blockquote class="normal">
	    Chaque navigateur embarque son interprêteur...<br/> il a donc fallu normaliser
	    JavaScript.
	  </blockquote>
	  <ul>
	    <li>Version mieux supportée : ES5</li>
	    <li>Dernière version avancée : ES6 (ou ES2015)</li>
	    <li>Tanspilers, Babel.</li>
	  </ul>
	</div>
      </section>

      <section data-label="Evolution de JavaScript" class="quasar-slide">
	<div>
	  <h1 class="section-title">Evolution du langage</h1>
	  <ul>
	    <li>Analyse statique (Flow)</li>
	    <li>Evolution de la norme (ES20XX) et <i>Polyfills</i></li>
	    <li>JavaScript comme un ByteCode (avant WebAssembly, Haxe, Elm, TypeScript etc.)</li>
	    <li>JavaScript comme un langage généraliste</li>
	  </ul>
	</div>
      </section>

      <section data-label="Eléments du langage" class="quasar-slide">
	<div class="section-cover">
	  <h1>Syntaxe et éléments du langage</h1>

	  <blockquote class="normal">
	    Avec ES2015 entre autre
	  </blockquote>

	  <div class="multi-columns toc small-text">
	    <div>
	      <strong class="important">Sommaire</strong>
	      <ul>
		<li>Variables</li>
		<li>Conditions</li>
		<li>Boucles</li>
		<li>Fonctions</li>
		<li>Objets et tableaux</li>
	      </ul>
	    </div>
	    <div>
	      <strong class="important">Liens utiles</strong>
	      <ul>
		<li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript">
		    Guide JavaScript sur MDN
		</a></li>
		<li><a href="http://es6-features.org/#Constants">
		    Les nouveautés d'ECMAScript 2015
		</a></li>
		<li><a href="http://fr.eloquentjavascript.net/">
		    Le livre "Eloquent JavaScript"
		</a></li>
	      </ul>
	    </div>
	  </div>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Utiliser JavaScript en dehors du Navigateur</h1>
	  <ul>
	    <li><code>$ node</code> Pour lancer un REPL</li>
	    <li><code>$ node fichier.js</code> Pour exécuter un fichier</li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <div class="multi-columns">
	    <div>
	      <h1 class="section-title">Variables</h1>
	      <ul>
		<li><span class="important">var</span> : `var name = value`</li>
		<li><span class="important">let</span> : `let name = value`</li>
		<li><span class="important">const</span> : `const name = value`</li>
	      </ul>
	      La portée lexicale est partiellement<br> respectée.
	      <h1 class="section-title">Conditions</h1>
	      <ul>
		<li><span class="important">if/else</span></li>
		<li>Conditions ternaires</li>
		<li><span class="important">switch/case</span></li>
	      </ul>
	    </div>
	    <div>
	      <h1 class="section-title">Boucles</h1>
	      <ul>
		<li><span class="important">while/do while</span></li>
		<li><span class="important">for</span></li>
		<li>Récursion</li>
		<li>Combinateurs fonctionnels</li>
	      </ul>
	    </div>
	  </div>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Fonctions</h1>
	  <ul>
	    <li><code>function name(arg1, arg2) { ... }</code></li>
	    <li><code>let name = function(arg1, arg2) { ... };</code></li>
	    <li><code>let name = (arg1, arg2) => { ... };</code></li>
	    <li><code>setTimeout(f, ms) && setInterval(f, ms)</code></li>
	  </ul>
	  Les fonctions sont des valeurs du langage !
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Closure : isoler du code</h1>
	  <code>(function(x) { ... })(y);</code><br/><br />
	  Soit une fonction sans nom exécutée tout de suite.
	  <br />
	  <ul>
	    <li>Permet de scoper des variables</li>
	    <li>Permet donc d'éviter les problèmes de passage par référence</li>
	    <li>Permet de simuler le mot-clé "statique"</li>
	  </ul>
	</div>
      </section>


      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Programmation Fonctionnelle</h1>
	  <ul>
	    <li>Lambda-calculus (1935)</li>
	    <li>Pilliers de la programmation fonctionnelle</li>
	    <li>Motif agréable à utiliser</li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Programmation orientée Objets</h1>
	  <ul>
	    <li>Simula, Self et Smalltalk... C++, Java... PHP... JavaScript</li>
	    <li>Tout est message</li>
	    <li>3 sous-paradigmes</li>
	    <li>Réutilisabilité et morcellement de code</li>
	    <li>Encapsulation</li>
	    <li>Modèle complexe à utiliser avec parcimonie</li>
	    <li>
	      <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">
		Référence des "built-in"'s objects
	    </a></li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Tableaux</h1>
	  <ul>
	    <li><code>let tab = [1, 2, 3];</code></li>
	    <li><code>let tab = new Array(a, b, c, ...);</code></li>
	    <li><code>function(...args) // args devient un tableau</code></li>
	    <li><code>let tab = new Array(taille).fill(valeur_par_défaut);</code></li>
	    <li><code>tab[i] = new_value;</code></li>
	    <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array">
		Méthodes sur les tableaux</a></li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Itérer sur un tableau</h1>
	  <pre><code>for(let i = 0; i &amp; tab.length; i++) { console.log(tab[i]); }</code></pre>
	  <pre><code>for(i in tab) { console.log(tab[i]); }</code></pre>
	  <pre><code>tab.forEach(i => console.log(i));</code></pre>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Combinateurs fonctionnels</h1>
	  <li><code>forEach(fun(elt, *i, *array))</code></li>
	  <li><code>find(fun(elt, *i, *array))</code></li>
	  <li><code>filter(fun(elt, *i, *array))</code></li>
	  <li><code>findIndex(fun(elt, *i, *array))</code></li>
	  <li><code>map(fun(elt, *i, *array))</code></li>
	  <li><code>reduce(fun(elt, *i, *array), accumulateur)</code> (ou reduceRight)</li>
	  <li><code>some(fun(elt, *i, *array))</code></li>
	  <li><code>every(fun(elt, *i, *array))</code></li>
	  <br><br>
	  <strong>Proposition :</strong> Implémenter "sum", "some" et "every" avec "reduce".
	</div>
      </section>

      
      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Objets littéraux</h1>
	  <pre><code>
<!--     -->let point = {
<!--     -->"x" : 12,
<!--     -->"y" : 24
<!--     -->};
	  </code></pre>
	  <ul>
	    <li>Peut servir d'espace-nom</li>
	    <li>Les membres sont publics</li>
	    <li>Accessible par envoi de message par index</li>
	  </ul>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Prototypes</h1>
	  <pre><code>function Point(x, y) { this.x = x; this.y = y; }</code></pre>
	  <pre><code>let p1 = new Point(12, 24);</code></pre>
	  <span class="important">this</span>
	  référence toujours le contexte courant (sauf dans les fats arrows).
	  <h2>Méthodes</h2>
	  <pre><code>function Point(x, y) { this.x = x; this.y = y; this.f = function(){} }</code></pre>
	  <pre><code>Point.prototype.f = function() {};</code></pre>
	  Cela permet aussi le Monkeypatching
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Transformation de contexte des méthodes/lambdas</h1>
	  <ul>
	    <li><code>lambda.call(obj, argA, argB...);</code></li>
	    <li><code>lambda.apply(obj, [argA, argB...]);</code></li>
	    <li><code>lambda.bind(obj)</code></li>
	  </ul>
	</div>
      </section>


      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Héritage classique</h1>
	  <pre><code>function Class(a, b, c) { Parent.call(this, a, b); this.c = c; }</code></pre>
	  <pre><code>Class.prototype = Object.create(Parent.prototype);</code></pre>
	</div>
      </section>


      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Les classes "à la Java"</h1>
	  <ul>
	    <li>Nouvelle syntaxe plus expressive (selon certains)</li>
	    <li>Des fonctions "un peu spéciale"</li>
	  </ul>
<pre><code>class Polygone {
  constructor(hauteur, largeur) {
    this.hauteur = hauteur;
    this.largeur = largeur;
  }
}</code></pre>
	</div>
      </section>


      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Multiples définitions</h1>
	  Les classes sont des "fonctions", donc des valeurs.
	  <pre><code>let A = class {};</code></pre>
	  <pre><code>class A {}</code></pre>
	</div>
      </section>

      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Encapsulation</h1>
	  <pre><code>class Person {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }
  get fullName() {
    return (this.formattedPrefix ? this.formattedPrefix: '') + this.firstName + ' ' + this.lastName;
  }
  set prefix(string) {
    this.formattedPrefix = string + ' ';
  }
}
var me = new Person('Flip', 'Stewart');
me.prefix = 'Super Dr.';
me.fullName
	  </code></pre>
	</div>
      </section>

      
      <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Héritage</h1>
	  <pre><code>class Animal { 
  constructor(nom) {
    this.nom = nom;
  }
  
  parle() {
    console.log(this.nom + ' fait du bruit.');
  }
}

class Chien extends Animal {
    parle() {
    super.crie() // Référence la classe parente	      
    console.log(this.nom + ' aboie.');
  }
}
	  </code></pre>
	</div>
      </section>


       <section class="quasar-slide">
	<div>
	  <h1 class="section-title">Modèles mélangeables</h1>
	  <blockquote class="normal">
	    Les classes ne sont qu'un sucre syntaxique pour les prototypes
	  </blockquote>
	  <pre><code>function Animal (nom) {
  this.nom = nom;
}
Animal.prototype.crie = function () {
  console.log(this.nom + ' fait du bruit.');
} 

class Chien extends Animal {
  crie() {
    super.crie();
    console.log(this.nom + ' aboie.');
  }
} </code></pre>
	</div>
       </section>


       <section class="quasar-slide">
	 <div>
	   <h1 class="section-title">Staticité de membres</h1>
	   <ul>
	     <li>Préfix <span class="important">static</span> comme en Java</li>
	     <li>Retyper une classe <br/>
	       <code>static get [Symbol.species]() { return Array; }</code></li>
	   </ul>
	 </div>
       </section>


       <section class="quasar-slide">
	 <div>
	   <h1 class="section-title">Héritage transversal</h1>
	   <ul>
	     <li>Pas d'héritage multiple classique (trop de problèmes)</li>
	     <li>Possibilité d'utiliser des <span class="important">mix-in's</span></li>
	   </ul>
	 </div>
       </section>

       <section class="quasar-slide">
	 <div>
	   <h1 class="section-title">Weird trick : Mixins</h1>
	   Les classes sont des valeurs.
	   <pre><code>let mixinA = (base) => class extends base {...}</code></pre>
	   <pre><code>let mixinB = (base) => class extends base {...}</code></pre>
	   <pre><code>class B extends mixinB(mixinB(A)) {...}</code></pre>
	 </div>
       </section>


       <section class="quasar-slide">
	 <div>
	   <h1 class="section-title">Gestion des erreurs</h1>
	   <ul>
	     <li><code>throw new Error(message);</code></li>
	     <li><code>try ... catch</code></li>
	     <li><code>try ... finally</code></li>
	     <li><code>try ... catch ... finally</code></li>
	     <li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Error">
		 Documentation de Error
	     </a></li>
	   </ul>
	   On utilise <code>instanceof</code> pour définir le type<br />
	   d'une exception dans un block catch.
	 </div>
       </section>

       <section class="quasar-slide">
	 <div>
	   <h1 class="section-title">Gestion des erreurs</h1>
	   <pre><code>try {
    maRoutine(); // may throw three types of exceptions
} catch (e) {
    if (e instanceof TypeError) {
        // les instructions pour gérer TypeError
    } else if (e instanceof RangeError) {
        // les instructions pour gérer RangeError
    } else if (e instanceof EvalError) {
        // les instructions pour gérer EvalError
    } else {
       // les instructions pour gérer les autres exceptions
    }
}</code></pre>
	 </div>
       </section>


       <section data-label="Premier exercice" class="quasar-slide">
	<div class="section-cover">
	  <h1>Exercice, interprêter Brainfuck</h1>

	  <blockquote class="normal">
	    
	  </blockquote>

	  <div class="multi-columns toc small-text">
	    <div>
	      <strong class="important">Sommaire</strong>
	      <ul>
		<li>Variables</li>
		<li>Conditions</li>
		<li>Boucles</li>
		<li>Fonctions</li>
		<li>Objets et tableaux</li>
	      </ul>
	    </div>
	    <div>
	      <strong class="important">Liens utiles</strong>
	      <ul>
		<li><a href="https://developer.mozilla.org/fr/docs/Web/JavaScript">
		    Guide JavaScript sur MDN
		</a></li>
		<li><a href="http://es6-features.org/#Constants">
		    Les nouveautés d'ECMAScript 2015
		</a></li>
		<li><a href="http://fr.eloquentjavascript.net/">
		    Le livre "Eloquent JavaScript"
		</a></li>
	      </ul>
	    </div>
	  </div>
	</div>
      </section>



    </main>

    <footer class="quasar-removable">
      <span id="pagination"></span>
      <span id="label"></span>
    </footer>
      

    <script src="../common/slideshow.js" type="application/javascript"></script>
  </body>
</html>

